{"/home/travis/build/npmtest/node-npmtest-generator-webapp-php/test.js":"/* istanbul instrument in package npmtest_generator_webapp_php */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-webapp-php/lib.npmtest_generator_webapp_php.js":"/* istanbul instrument in package npmtest_generator_webapp_php */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_webapp_php = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_webapp_php = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-webapp-php/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-webapp-php && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_webapp_php */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_webapp_php\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_webapp_php.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_webapp_php.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_webapp_php.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_webapp_php.__dirname + '/lib.npmtest_generator_webapp_php.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-webapp-php/node_modules/generator-webapp-php/app/index.js":"'use strict';\nvar util = require('util');\nvar path = require('path');\nvar spawn = require('child_process').spawn;\nvar yeoman = require('yeoman-generator');\n\n\nvar AppGenerator = module.exports = function Appgenerator(args, options, config) {\n  yeoman.generators.Base.apply(this, arguments);\n\n  // setup the test-framework property, Gruntfile template will need this\n  this.testFramework = options['test-framework'] || 'mocha';\n  this.coffee = options.coffee;\n\n  // for hooks to resolve on mocha by default\n  options['test-framework'] = this.testFramework;\n\n  // resolved to mocha by default (could be switched to jasmine for instance)\n  this.hookFor('test-framework', { as: 'app' });\n\n  this.on('end', function () {\n    this.installDependencies({\n      skipInstall: options['skip-install'],\n      skipMessage: options['skip-install-message']\n    });\n  });\n\n  this.pkg = JSON.parse(this.readFileAsString(path.join(__dirname, '../package.json')));\n};\n\nutil.inherits(AppGenerator, yeoman.generators.Base);\n\nAppGenerator.prototype.askFor = function askFor() {\n  var cb = this.async();\n\n  // welcome message\n  if (!this.options['skip-welcome-message']) {\n    console.log(this.yeoman);\n    console.log('Out of the box I include HTML5 Boilerplate and jQuery.');\n  }\n\n  var prompts = [{\n    type: 'checkbox',\n    name: 'features',\n    message: 'What more would you like?',\n    choices: [{\n      name: 'Bootstrap for Sass',\n      value: 'compassBootstrap',\n      checked: true\n    }, {\n      name: 'Modernizr',\n      value: 'includeModernizr',\n      checked: true\n    }]\n  }];\n\n  this.prompt(prompts, function (answers) {\n    var features = answers.features;\n\n    function hasFeature(feat) { return features.indexOf(feat) !== -1; }\n\n    // manually deal with the response, get back and store the results.\n    // we change a bit this way of doing to automatically do this in the self.prompt() method.\n    this.compassBootstrap = hasFeature('compassBootstrap');\n    this.includeModernizr = hasFeature('includeModernizr');\n\n    cb();\n  }.bind(this));\n};\n\nAppGenerator.prototype.gruntfile = function gruntfile() {\n  this.template('Gruntfile.js');\n};\n\nAppGenerator.prototype.packageJSON = function packageJSON() {\n  this.template('_package.json', 'package.json');\n};\n\nAppGenerator.prototype.git = function git() {\n  this.copy('gitignore', '.gitignore');\n  this.copy('gitattributes', '.gitattributes');\n};\n\nAppGenerator.prototype.bower = function bower() {\n  this.copy('bowerrc', '.bowerrc');\n  this.copy('_bower.json', 'bower.json');\n};\n\nAppGenerator.prototype.jshint = function jshint() {\n  this.copy('jshintrc', '.jshintrc');\n};\n\nAppGenerator.prototype.editorConfig = function editorConfig() {\n  this.copy('editorconfig', '.editorconfig');\n};\n\nAppGenerator.prototype.h5bp = function h5bp() {\n  this.copy('favicon.ico', 'app/favicon.ico');\n  this.copy('404.html', 'app/404.html');\n  this.copy('robots.txt', 'app/robots.txt');\n  this.copy('htaccess', 'app/.htaccess');\n};\n\nAppGenerator.prototype.api = function api() {\n  this.copy('resource.php', 'app/api/resource.php');\n};\n\nAppGenerator.prototype.mainStylesheet = function mainStylesheet() {\n  var css = 'main.' + (this.compassBootstrap ? 's' : '') + 'css';\n  this.copy(css, 'app/styles/' + css);\n};\n\nAppGenerator.prototype.writeIndex = function writeIndex() {\n  var bs;\n\n  this.indexFile = this.readFileAsString(path.join(this.sourceRoot(), 'index.html'));\n  this.indexFile = this.engine(this.indexFile, this);\n  this.indexFile = this.appendScripts(this.indexFile, 'scripts/main.js', [\n    'scripts/main.js'\n  ]);\n\n  if (this.compassBootstrap) {\n    // wire Twitter Bootstrap plugins\n    bs = 'bower_components/sass-bootstrap/js/';\n    this.indexFile = this.appendScripts(this.indexFile, 'scripts/plugins.js', [\n      bs + 'affix.js',\n      bs + 'alert.js',\n      bs + 'dropdown.js',\n      bs + 'tooltip.js',\n      bs + 'modal.js',\n      bs + 'transition.js',\n      bs + 'button.js',\n      bs + 'popover.js',\n      bs + 'carousel.js',\n      bs + 'scrollspy.js',\n      bs + 'collapse.js',\n      bs + 'tab.js'\n    ]);\n  }\n};\n\nAppGenerator.prototype.app = function app() {\n  this.mkdir('app');\n  this.mkdir('app/api');\n  this.mkdir('app/scripts');\n  this.mkdir('app/styles');\n  this.mkdir('app/images');\n  this.write('app/index.html', this.indexFile);\n\n  if (this.coffee) {\n    this.write(\n      'app/scripts/main.coffee',\n      'console.log \"\\'Allo from CoffeeScript!\"'\n    );\n  }\n  else {\n    this.copy('main.js', 'app/scripts/main.js');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-webapp-php/node_modules/generator-webapp-php/app/templates/Gruntfile.js":"// Generated on <%= (new Date).toISOString().split('T')[0] %> using <%= pkg.name %> <%= pkg.version %>\n'use strict';\n\n// # Globbing\n// for performance reasons we're only matching one level down:\n// 'test/spec/{,*/}*.js'\n// use this if you want to recursively match all subfolders:\n// 'test/spec/**/*.js'\n\nmodule.exports = function (grunt) {\n\n    // Load grunt tasks automatically\n    require('load-grunt-tasks')(grunt);\n\n    // Time how long tasks take. Can help when optimizing build times\n    require('time-grunt')(grunt);\n\n    var proxyMiddleware = function (connect, options) {\n        var middlewares = [];\n        var directory = options.directory || options.base[options.base.length - 1];\n        if (!Array.isArray(options.base)) {\n            options.base = [options.base];\n        }\n\n        // Setup the proxy\n        middlewares.push(require('grunt-connect-proxy/lib/utils').proxyRequest);\n\n        options.base.forEach(function(base) {\n            // Serve static files.\n            middlewares.push(connect.static(base));\n        });\n\n        // Make directory browse-able.\n        middlewares.push(connect.directory(directory));\n\n        return middlewares;\n    };\n\n    // Define the configuration for all the tasks\n    grunt.initConfig({\n\n        // Project settings\n        yeoman: {\n            // Configurable paths\n            app: 'app',\n            dist: 'dist'\n        },\n\n        // Watches files for changes and runs tasks based on the changed files\n        watch: {<% if (coffee) { %>\n            coffee: {\n                files: ['<%%= yeoman.app %>/scripts/{,*/}*.{coffee,litcoffee,coffee.md}'],\n                tasks: ['coffee:dist']\n            },\n            coffeeTest: {\n                files: ['test/spec/{,*/}*.{coffee,litcoffee,coffee.md}'],\n                tasks: ['coffee:test', 'test:watch']\n            },<% } else { %>\n            js: {\n                files: ['<%%= yeoman.app %>/scripts/{,*/}*.js'],\n                tasks: ['jshint'],\n                options: {\n                    livereload: true\n                }\n            },\n            jstest: {\n                files: ['test/spec/{,*/}*.js'],\n                tasks: ['test:watch']\n            },<% } %>\n            gruntfile: {\n                files: ['Gruntfile.js']\n            },\n            compass: {\n                files: ['<%%= yeoman.app %>/styles/{,*/}*.{scss,sass}'],\n                tasks: ['compass:server', 'autoprefixer']\n            },\n            styles: {\n                files: ['<%%= yeoman.app %>/styles/{,*/}*.css'],\n                tasks: ['newer:copy:styles', 'autoprefixer']\n            },\n            livereload: {\n                options: {\n                    livereload: '<%%= connect.options.livereload %>'\n                },\n                files: [\n                    '<%%= yeoman.app %>/*.html',\n                    '.tmp/styles/{,*/}*.css',<% if (coffee) { %>\n                    '.tmp/scripts/{,*/}*.js',<% } %>\n                    '<%%= yeoman.app %>/images/{,*/}*.{gif,jpeg,jpg,png,svg,webp}'\n                ]\n            }\n        },\n\n        // The actual grunt server settings\n        connect: {\n            options: {\n                port: 9000,\n                livereload: 35729,\n                // Change this to '0.0.0.0' to access the server from outside\n                hostname: 'localhost'\n            },\n            proxies: [\n                {\n                    context: '/api',\n                    host: 'localhost',\n                    port: 8000\n                }\n            ],\n            livereload: {\n                options: {\n                    open: true,\n                    base: [\n                        '.tmp',\n                        '<%%= yeoman.app %>'\n                    ],\n                    middleware: proxyMiddleware\n                }\n            },\n            test: {\n                options: {\n                    port: 9001,\n                    base: [\n                        '.tmp',\n                        'test',\n                        '<%%= yeoman.app %>'\n                    ]\n                }\n            },\n            dist: {\n                options: {\n                    open: true,\n                    base: '<%%= yeoman.dist %>',\n                    livereload: false,\n                    middleware: proxyMiddleware\n                }\n            }\n        },\n\n        // Grunt php server\n        php: {\n            options: {\n                port: 8000,\n                // Change this to '0.0.0.0' to access the server from outside.\n                hostname: '127.0.0.1'\n            },\n            server: {\n                options: {\n                    base: '<%%= yeoman.app %>',\n                }\n            },\n            dist: {\n                options: {\n                    base: '<%%= yeoman.dist %>',\n                }\n            }\n        },\n\n        // Empties folders to start fresh\n        clean: {\n            dist: {\n                files: [{\n                    dot: true,\n                    src: [\n                        '.tmp',\n                        '<%%= yeoman.dist %>/*',\n                        '!<%%= yeoman.dist %>/.git*'\n                    ]\n                }]\n            },\n            server: '.tmp'\n        },\n\n        // Make sure code styles are up to par and there are no obvious mistakes\n        jshint: {\n            options: {\n                jshintrc: '.jshintrc',\n                reporter: require('jshint-stylish')\n            },\n            all: [\n                'Gruntfile.js',\n                '<%%= yeoman.app %>/scripts/{,*/}*.js',\n                '!<%%= yeoman.app %>/scripts/vendor/*',\n                'test/spec/{,*/}*.js'\n            ]\n        },\n\n<% if (testFramework === 'mocha') { %>\n        // Mocha testing framework configuration options\n        mocha: {\n            all: {\n                options: {\n                    run: true,\n                    urls: ['http://<%%= connect.test.options.hostname %>:<%%= connect.test.options.port %>/index.html']\n                }\n            }\n        },<% } else if (testFramework === 'jasmine') { %>\n        // Jasmine testing framework configuration options\n        jasmine: {\n            all: {\n                options: {\n                    specs: 'test/spec/{,*/}*.js'\n                }\n            }\n        },<% } %>\n\n<% if (coffee) { %>\n        // Compiles CoffeeScript to JavaScript\n        coffee: {\n            dist: {\n                files: [{\n                    expand: true,\n                    cwd: '<%%= yeoman.app %>/scripts',\n                    src: '{,*/}*.{coffee,litcoffee,coffee.md}',\n                    dest: '.tmp/scripts',\n                    ext: '.js'\n                }]\n            },\n            test: {\n                files: [{\n                    expand: true,\n                    cwd: 'test/spec',\n                    src: '{,*/}*.{coffee,litcoffee,coffee.md}',\n                    dest: '.tmp/spec',\n                    ext: '.js'\n                }]\n            }\n        },<% } %>\n\n        // Compiles Sass to CSS and generates necessary files if requested\n        compass: {\n            options: {\n                sassDir: '<%%= yeoman.app %>/styles',\n                cssDir: '.tmp/styles',\n                generatedImagesDir: '.tmp/images/generated',\n                imagesDir: '<%%= yeoman.app %>/images',\n                javascriptsDir: '<%%= yeoman.app %>/scripts',\n                fontsDir: '<%%= yeoman.app %>/styles/fonts',\n                importPath: '<%%= yeoman.app %>/bower_components',\n                httpImagesPath: '/images',\n                httpGeneratedImagesPath: '/images/generated',\n                httpFontsPath: '/styles/fonts',\n                relativeAssets: false,\n                assetCacheBuster: false\n            },\n            dist: {\n                options: {\n                    generatedImagesDir: '<%%= yeoman.dist %>/images/generated'\n                }\n            },\n            server: {\n                options: {\n                    debugInfo: true\n                }\n            }\n        },\n\n        // Add vendor prefixed styles\n        autoprefixer: {\n            options: {\n                browsers: ['last 1 version']\n            },\n            dist: {\n                files: [{\n                    expand: true,\n                    cwd: '.tmp/styles/',\n                    src: '{,*/}*.css',\n                    dest: '.tmp/styles/'\n                }]\n            }\n        },\n\n        // Automatically inject Bower components into the HTML file\n        'bower-install': {\n            app: {\n                html: '<%%= yeoman.app %>/index.html',\n                ignorePath: '<%%= yeoman.app %>/'\n            }\n        },\n\n        // Renames files for browser caching purposes\n        rev: {\n            dist: {\n                files: {\n                    src: [\n                        '<%%= yeoman.dist %>/scripts/{,*/}*.js',\n                        '<%%= yeoman.dist %>/styles/{,*/}*.css',\n                        '<%%= yeoman.dist %>/images/{,*/}*.{gif,jpeg,jpg,png,webp}',\n                        '<%%= yeoman.dist %>/styles/fonts/{,*/}*.*'\n                    ]\n                }\n            }\n        },\n\n        // Reads HTML for usemin blocks to enable smart builds that automatically\n        // concat, minify and revision files. Creates configurations in memory so\n        // additional tasks can operate on them\n        useminPrepare: {\n            options: {\n                dest: '<%%= yeoman.dist %>'\n            },\n            html: '<%%= yeoman.app %>/index.html'\n        },\n\n        // Performs rewrites based on rev and the useminPrepare configuration\n        usemin: {\n            options: {\n                assetsDirs: ['<%%= yeoman.dist %>']\n            },\n            html: ['<%%= yeoman.dist %>/{,*/}*.html'],\n            css: ['<%%= yeoman.dist %>/styles/{,*/}*.css']\n        },\n\n        // The following *-min tasks produce minified files in the dist folder\n        imagemin: {\n            dist: {\n                files: [{\n                    expand: true,\n                    cwd: '<%%= yeoman.app %>/images',\n                    src: '{,*/}*.{gif,jpeg,jpg,png}',\n                    dest: '<%%= yeoman.dist %>/images'\n                }]\n            }\n        },\n        svgmin: {\n            dist: {\n                files: [{\n                    expand: true,\n                    cwd: '<%%= yeoman.app %>/images',\n                    src: '{,*/}*.svg',\n                    dest: '<%%= yeoman.dist %>/images'\n                }]\n            }\n        },\n        htmlmin: {\n            dist: {\n                options: {\n                    // removeCommentsFromCDATA: true,\n                    // collapseWhitespace: true,\n                    // collapseBooleanAttributes: true,\n                    // removeAttributeQuotes: true,\n                    // removeRedundantAttributes: true,\n                    // useShortDoctype: true,\n                    // removeEmptyAttributes: true,\n                    // removeOptionalTags: true\n                },\n                files: [{\n                    expand: true,\n                    cwd: '<%%= yeoman.app %>',\n                    src: '*.html',\n                    dest: '<%%= yeoman.dist %>'\n                }]\n            }\n        },\n\n        // By default, your `index.html`'s <!-- Usemin block --> will take care of\n        // minification. These next options are pre-configured if you do not wish\n        // to use the Usemin blocks.\n        // cssmin: {\n        //     dist: {\n        //         files: {\n        //             '<%%= yeoman.dist %>/styles/main.css': [\n        //                 '.tmp/styles/{,*/}*.css',\n        //                 '<%%= yeoman.app %>/styles/{,*/}*.css'\n        //             ]\n        //         }\n        //     }\n        // },\n        // uglify: {\n        //     dist: {\n        //         files: {\n        //             '<%%= yeoman.dist %>/scripts/scripts.js': [\n        //                 '<%%= yeoman.dist %>/scripts/scripts.js'\n        //             ]\n        //         }\n        //     }\n        // },\n        // concat: {\n        //     dist: {}\n        // },\n\n        // Copies remaining files to places other tasks can use\n        copy: {\n            dist: {\n                files: [{\n                    expand: true,\n                    dot: true,\n                    cwd: '<%%= yeoman.app %>',\n                    dest: '<%%= yeoman.dist %>',\n                    src: [\n                        'api/{,*/}*.*',\n                        '*.{ico,png,txt}',\n                        '.htaccess',\n                        'images/{,*/}*.webp',\n                        'styles/fonts/{,*/}*.*'<% if (compassBootstrap) { %>,\n                        'bower_components/sass-bootstrap/fonts/*.*'<% } %>\n                    ]\n                }]\n            },\n            styles: {\n                expand: true,\n                dot: true,\n                cwd: '<%%= yeoman.app %>/styles',\n                dest: '.tmp/styles/',\n                src: '{,*/}*.css'\n            }\n        },\n\n<% if (includeModernizr) { %>\n        // Generates a custom Modernizr build that includes only the tests you\n        // reference in your app\n        modernizr: {\n            devFile: '<%%= yeoman.app %>/bower_components/modernizr/modernizr.js',\n            outputFile: '<%%= yeoman.dist %>/bower_components/modernizr/modernizr.js',\n            files: [\n                '<%%= yeoman.dist %>/scripts/{,*/}*.js',\n                '<%%= yeoman.dist %>/styles/{,*/}*.css',\n                '!<%%= yeoman.dist %>/scripts/vendor/*'\n            ],\n            uglify: true\n        },<% } %>\n\n        // Run some tasks in parallel to speed up build process\n        concurrent: {\n            server: [\n                'compass:server',<% if (coffee) { %>\n                'coffee:dist',<% } %>\n                'copy:styles'\n            ],\n            test: [<% if (coffee) { %>\n                'coffee',<% } %>\n                'copy:styles'\n            ],\n            dist: [<% if (coffee) { %>\n                'coffee',<% } %>\n                'compass',\n                'copy:styles',\n                'imagemin',\n                'svgmin',\n                'htmlmin'\n            ]\n        }\n    });\n\n\n    grunt.registerTask('serve', function (target) {\n        if (target === 'dist') {\n            return grunt.task.run([\n              'build',\n              'configureProxies',\n              'php:dist',\n              'connect:dist:keepalive'\n            ]);\n        }\n\n        grunt.task.run([\n            'clean:server',\n            'concurrent:server',\n            'autoprefixer',\n            'configureProxies',\n            'php:server',\n            'connect:livereload',\n            'watch'\n        ]);\n    });\n\n    grunt.registerTask('server', function () {\n        grunt.log.warn('The `server` task has been deprecated. Use `grunt serve` to start a server.');\n        grunt.task.run(['serve']);\n    });\n\n    grunt.registerTask('test', function(target) {\n        if (target !== 'watch') {\n            grunt.task.run([\n                'clean:server',\n                'concurrent:test',\n                'autoprefixer',\n            ]);\n        }\n\n        grunt.task.run([\n            'connect:test',<% if (testFramework === 'mocha') { %>\n            'mocha'<% } else if (testFramework === 'jasmine') { %>\n            'jasmine'<% } %>\n        ]);\n    });\n\n    grunt.registerTask('build', [\n        'clean:dist',\n        'useminPrepare',\n        'concurrent:dist',\n        'autoprefixer',\n        'concat',\n        'cssmin',\n        'uglify',\n        'copy:dist',<% if (includeModernizr) { %>\n        'modernizr',<% } %>\n        'rev',\n        'usemin'\n    ]);\n\n    grunt.registerTask('default', [\n        'newer:jshint',\n        'test',\n        'build'\n    ]);\n};\n","/home/travis/build/npmtest/node-npmtest-generator-webapp-php/node_modules/generator-webapp-php/app/templates/main.js":"console.log('\\'Allo \\'Allo!');\n\n$(function() {\n    'use strict';\n\n    var container = $('[data-resource-container');\n\n    // Get all resources\n    $.ajax('/api/resource.php', { dataType: 'json' })\n    .done(function(data) {\n        data.resources.forEach(function(resource) {\n\n            var div = $('<div>').appendTo(container)\n                .append('<h4>' + resource.name + '</h4>');\n\n            // Get resource descriptions\n            $.ajax(resource.href, { dataType: 'json' })\n            .done(function(resourceData) {\n                div.append('<p>' + resourceData.description + '</p>');\n            })\n            .fail(function(jqXHR) {\n                var data;\n                try {\n                    data = $.parseJSON(jqXHR.responseText);\n                }\n                catch (e) {\n                    data = {\n                        description: 'Server is unreachable'\n                    };\n                }\n                container.append('<div class=\"alert alert-danger\">' + data.description + '</div>');\n            });\n        });\n    })\n    .fail(function(jqXHR) {\n        var data;\n        try {\n            data = $.parseJSON(jqXHR.responseText);\n        }\n        catch (e) {\n            data = {\n                description: 'Server is unreachable'\n            };\n        }\n        container.append('<div class=\"alert alert-danger\">' + data.description + '</div>');\n    });\n\n});\n"}